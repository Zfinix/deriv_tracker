// Mocks generated by Mockito 5.2.0 from annotations
// in deriv_api/src/models/binary_ticker_model.dart.
// Do not manually edit this file.

import 'package:deriv_api/src/models/binary_ticker_model.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeBinaryTickerEchoReq_0 extends _i1.Fake
    implements _i2.BinaryTickerEchoReq {}

class _FakeSubscription_1 extends _i1.Fake implements _i2.Subscription {}

class _FakeTick_2 extends _i1.Fake implements _i2.Tick {}

class _FakeBinaryTickerModel_3 extends _i1.Fake
    implements _i2.BinaryTickerModel {}

/// A class which mocks [BinaryTickerModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockBinaryTickerModel extends _i1.Mock implements _i2.BinaryTickerModel {
  MockBinaryTickerModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BinaryTickerEchoReq get echoReq => (super.noSuchMethod(
      Invocation.getter(#echoReq),
      returnValue: _FakeBinaryTickerEchoReq_0()) as _i2.BinaryTickerEchoReq);
  @override
  String get msgType =>
      (super.noSuchMethod(Invocation.getter(#msgType), returnValue: '')
          as String);
  @override
  _i2.Subscription get subscription =>
      (super.noSuchMethod(Invocation.getter(#subscription),
          returnValue: _FakeSubscription_1()) as _i2.Subscription);
  @override
  _i2.Tick get tick =>
      (super.noSuchMethod(Invocation.getter(#tick), returnValue: _FakeTick_2())
          as _i2.Tick);
  @override
  List<Object> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object>[])
          as List<Object>);
  @override
  _i2.BinaryTickerModel copyWith(
          {_i2.BinaryTickerEchoReq? echoReq,
          String? msgType,
          _i2.Subscription? subscription,
          _i2.Tick? tick}) =>
      (super.noSuchMethod(
          Invocation.method(#copyWith, [], {
            #echoReq: echoReq,
            #msgType: msgType,
            #subscription: subscription,
            #tick: tick
          }),
          returnValue: _FakeBinaryTickerModel_3()) as _i2.BinaryTickerModel);
  @override
  Map<String, dynamic> toMap() =>
      (super.noSuchMethod(Invocation.method(#toMap, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  String toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []), returnValue: '')
          as String);
}

/// A class which mocks [BinaryTickerEchoReq].
///
/// See the documentation for Mockito's code generation for more information.
class MockBinaryTickerEchoReq extends _i1.Mock
    implements _i2.BinaryTickerEchoReq {
  MockBinaryTickerEchoReq() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get subscribe =>
      (super.noSuchMethod(Invocation.getter(#subscribe), returnValue: 0)
          as int);
  @override
  String get ticks =>
      (super.noSuchMethod(Invocation.getter(#ticks), returnValue: '')
          as String);
  @override
  List<Object> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object>[])
          as List<Object>);
  @override
  _i2.BinaryTickerEchoReq copyWith({int? subscribe, String? ticks}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #copyWith, [], {#subscribe: subscribe, #ticks: ticks}),
              returnValue: _FakeBinaryTickerEchoReq_0())
          as _i2.BinaryTickerEchoReq);
  @override
  Map<String, dynamic> toMap() =>
      (super.noSuchMethod(Invocation.method(#toMap, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  String toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []), returnValue: '')
          as String);
}

/// A class which mocks [Subscription].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscription extends _i1.Mock implements _i2.Subscription {
  MockSubscription() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  List<Object> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object>[])
          as List<Object>);
  @override
  _i2.Subscription copyWith({String? id}) =>
      (super.noSuchMethod(Invocation.method(#copyWith, [], {#id: id}),
          returnValue: _FakeSubscription_1()) as _i2.Subscription);
  @override
  Map<String, dynamic> toMap() =>
      (super.noSuchMethod(Invocation.method(#toMap, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  String toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []), returnValue: '')
          as String);
}

/// A class which mocks [Tick].
///
/// See the documentation for Mockito's code generation for more information.
class MockTick extends _i1.Mock implements _i2.Tick {
  MockTick() {
    _i1.throwOnMissingStub(this);
  }

  @override
  double get ask =>
      (super.noSuchMethod(Invocation.getter(#ask), returnValue: 0.0) as double);
  @override
  double get bid =>
      (super.noSuchMethod(Invocation.getter(#bid), returnValue: 0.0) as double);
  @override
  int get epoch =>
      (super.noSuchMethod(Invocation.getter(#epoch), returnValue: 0) as int);
  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  int get pipSize =>
      (super.noSuchMethod(Invocation.getter(#pipSize), returnValue: 0) as int);
  @override
  double get quote =>
      (super.noSuchMethod(Invocation.getter(#quote), returnValue: 0.0)
          as double);
  @override
  String get symbol =>
      (super.noSuchMethod(Invocation.getter(#symbol), returnValue: '')
          as String);
  @override
  List<Object> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object>[])
          as List<Object>);
  @override
  _i2.Tick copyWith(
          {double? ask,
          double? bid,
          int? epoch,
          String? id,
          int? pipSize,
          double? quote,
          String? symbol}) =>
      (super.noSuchMethod(
          Invocation.method(#copyWith, [], {
            #ask: ask,
            #bid: bid,
            #epoch: epoch,
            #id: id,
            #pipSize: pipSize,
            #quote: quote,
            #symbol: symbol
          }),
          returnValue: _FakeTick_2()) as _i2.Tick);
  @override
  Map<String, dynamic> toMap() =>
      (super.noSuchMethod(Invocation.method(#toMap, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  String toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []), returnValue: '')
          as String);
}
