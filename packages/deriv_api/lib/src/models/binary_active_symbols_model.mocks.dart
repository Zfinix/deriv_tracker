// Mocks generated by Mockito 5.2.0 from annotations
// in deriv_api/src/models/binary_active_symbols_model.dart.
// Do not manually edit this file.

import 'package:deriv_api/src/models/binary_active_symbols_model.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeActiveSymbolEchoReq_0 extends _i1.Fake
    implements _i2.ActiveSymbolEchoReq {}

class _FakeBinaryActiveSymbolsModel_1 extends _i1.Fake
    implements _i2.BinaryActiveSymbolsModel {}

class _FakeActiveSymbol_2 extends _i1.Fake implements _i2.ActiveSymbol {}

/// A class which mocks [BinaryActiveSymbolsModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockBinaryActiveSymbolsModel extends _i1.Mock
    implements _i2.BinaryActiveSymbolsModel {
  MockBinaryActiveSymbolsModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.ActiveSymbol> get activeSymbols =>
      (super.noSuchMethod(Invocation.getter(#activeSymbols),
          returnValue: <_i2.ActiveSymbol>[]) as List<_i2.ActiveSymbol>);
  @override
  _i2.ActiveSymbolEchoReq get echoReq => (super.noSuchMethod(
      Invocation.getter(#echoReq),
      returnValue: _FakeActiveSymbolEchoReq_0()) as _i2.ActiveSymbolEchoReq);
  @override
  String get msgType =>
      (super.noSuchMethod(Invocation.getter(#msgType), returnValue: '')
          as String);
  @override
  List<Object> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object>[])
          as List<Object>);
  @override
  _i2.BinaryActiveSymbolsModel copyWith(
          {List<_i2.ActiveSymbol>? activeSymbols,
          _i2.ActiveSymbolEchoReq? echoReq,
          String? msgType}) =>
      (super.noSuchMethod(
              Invocation.method(#copyWith, [], {
                #activeSymbols: activeSymbols,
                #echoReq: echoReq,
                #msgType: msgType
              }),
              returnValue: _FakeBinaryActiveSymbolsModel_1())
          as _i2.BinaryActiveSymbolsModel);
  @override
  Map<String, dynamic> toMap() =>
      (super.noSuchMethod(Invocation.method(#toMap, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  String toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []), returnValue: '')
          as String);
}

/// A class which mocks [ActiveSymbol].
///
/// See the documentation for Mockito's code generation for more information.
class MockActiveSymbol extends _i1.Mock implements _i2.ActiveSymbol {
  MockActiveSymbol() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get allowForwardStarting =>
      (super.noSuchMethod(Invocation.getter(#allowForwardStarting),
          returnValue: 0) as int);
  @override
  String get displayName =>
      (super.noSuchMethod(Invocation.getter(#displayName), returnValue: '')
          as String);
  @override
  int get exchangeIsOpen =>
      (super.noSuchMethod(Invocation.getter(#exchangeIsOpen), returnValue: 0)
          as int);
  @override
  int get isTradingSuspended => (super
          .noSuchMethod(Invocation.getter(#isTradingSuspended), returnValue: 0)
      as int);
  @override
  String get market =>
      (super.noSuchMethod(Invocation.getter(#market), returnValue: '')
          as String);
  @override
  String get marketDisplayName => (super
          .noSuchMethod(Invocation.getter(#marketDisplayName), returnValue: '')
      as String);
  @override
  double get pip =>
      (super.noSuchMethod(Invocation.getter(#pip), returnValue: 0.0) as double);
  @override
  String get submarket =>
      (super.noSuchMethod(Invocation.getter(#submarket), returnValue: '')
          as String);
  @override
  String get submarketDisplayName =>
      (super.noSuchMethod(Invocation.getter(#submarketDisplayName),
          returnValue: '') as String);
  @override
  String get symbol =>
      (super.noSuchMethod(Invocation.getter(#symbol), returnValue: '')
          as String);
  @override
  String get symbolType =>
      (super.noSuchMethod(Invocation.getter(#symbolType), returnValue: '')
          as String);
  @override
  List<Object> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object>[])
          as List<Object>);
  @override
  _i2.ActiveSymbol copyWith(
          {int? allowForwardStarting,
          String? displayName,
          int? exchangeIsOpen,
          int? isTradingSuspended,
          String? market,
          String? marketDisplayName,
          double? pip,
          String? submarket,
          String? submarketDisplayName,
          String? symbol,
          String? symbolType}) =>
      (super.noSuchMethod(
          Invocation.method(#copyWith, [], {
            #allowForwardStarting: allowForwardStarting,
            #displayName: displayName,
            #exchangeIsOpen: exchangeIsOpen,
            #isTradingSuspended: isTradingSuspended,
            #market: market,
            #marketDisplayName: marketDisplayName,
            #pip: pip,
            #submarket: submarket,
            #submarketDisplayName: submarketDisplayName,
            #symbol: symbol,
            #symbolType: symbolType
          }),
          returnValue: _FakeActiveSymbol_2()) as _i2.ActiveSymbol);
  @override
  Map<String, dynamic> toMap() =>
      (super.noSuchMethod(Invocation.method(#toMap, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  String toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []), returnValue: '')
          as String);
}

/// A class which mocks [ActiveSymbolEchoReq].
///
/// See the documentation for Mockito's code generation for more information.
class MockActiveSymbolEchoReq extends _i1.Mock
    implements _i2.ActiveSymbolEchoReq {
  MockActiveSymbolEchoReq() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get activeSymbols =>
      (super.noSuchMethod(Invocation.getter(#activeSymbols), returnValue: '')
          as String);
  @override
  String get productType =>
      (super.noSuchMethod(Invocation.getter(#productType), returnValue: '')
          as String);
  @override
  List<Object> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object>[])
          as List<Object>);
  @override
  _i2.ActiveSymbolEchoReq copyWith(
          {String? activeSymbols, String? productType}) =>
      (super.noSuchMethod(
              Invocation.method(#copyWith, [],
                  {#activeSymbols: activeSymbols, #productType: productType}),
              returnValue: _FakeActiveSymbolEchoReq_0())
          as _i2.ActiveSymbolEchoReq);
  @override
  Map<String, dynamic> toMap() =>
      (super.noSuchMethod(Invocation.method(#toMap, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  String toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []), returnValue: '')
          as String);
}
