// Mocks generated by Mockito 5.2.0 from annotations
// in deriv_repository/src/deriv_repository.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:deriv_api/deriv_api.dart' as _i4;
import 'package:deriv_repository/src/deriv_repository.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [DerivRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDerivRepository extends _i1.Mock implements _i2.DerivRepository {
  MockDerivRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i4.BinaryActiveSymbolsModel> getActiveSymbols() =>
      (super.noSuchMethod(Invocation.method(#getActiveSymbols, []),
              returnValue: Stream<_i4.BinaryActiveSymbolsModel>.empty())
          as _i3.Stream<_i4.BinaryActiveSymbolsModel>);
  @override
  _i3.Stream<_i4.BinaryTickerModel> fetchTicksForSymbol(String? symbol) =>
      (super.noSuchMethod(Invocation.method(#fetchTicksForSymbol, [symbol]),
              returnValue: Stream<_i4.BinaryTickerModel>.empty())
          as _i3.Stream<_i4.BinaryTickerModel>);
  @override
  void forgetAllTicks() =>
      super.noSuchMethod(Invocation.method(#forgetAllTicks, []),
          returnValueForMissingStub: null);
  @override
  void disconnect() => super.noSuchMethod(Invocation.method(#disconnect, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [DerivFailure].
///
/// See the documentation for Mockito's code generation for more information.
class MockDerivFailure extends _i1.Mock implements _i2.DerivFailure {
  MockDerivFailure() {
    _i1.throwOnMissingStub(this);
  }
}
